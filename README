# $Header: /Volumes/cvsrep/developer/OpenADFortTk/README,v 1.19 2004/05/11 17:48:33 eraxxon Exp $
=============================================================================
==
== $Source: /Volumes/cvsrep/developer/OpenADFortTk/README,v $
==
== Location: ${OPENADFORTTK}
==
=============================================================================

Contents:
  0. Prerequisites
  1. Obtaining
  2. Building
  3. Using

=============================================================================

0. Prerequisites
--------------------

Currently we actively support the following platforms:
  * i686-Linux
  * i686-Cygwin

Required packages:
  Shells: sh/bash, csh/tcsh
  Compilers:
    GCC C, C++, F77 (preferably at least 3.3)
  Other Tools:
    GNU make (not a vendor make)
    Perl 5.x (probably at least 5.6)

Notes:
  * Open64 and GCC 3.1 and 3.2
    - Open64 exposes a compiler bug. Suggest using 3.3 or greater.

=============================================================================

1. Obtaining
--------------------

Open64 
  [HiPerSoft cvs: user@koolkat2.cs.rice.edu:/Volumes/cvsrep/developer]
  cvs co Open64

OpenAnalysis
  [HiPerSoft cvs: user@koolkat2.cs.rice.edu:/Volumes/cvsrep/developer]
  cvs co OpenAnalysis

xercesc
  [HiPerSoft cvs: user@koolkat2.cs.rice.edu:/Volumes/cvsrep/developer]
  cvs co xercesc

OpenADFortTk
  [HiPerSoft cvs: user@koolkat2.cs.rice.edu:/Volumes/cvsrep/developer]
  cvs co OpenADFortTk

xaifbooster, angel, boost
  xaifbooster
    [MCS bitkeeper /home/derivs/share/xaifBooster]
    bk clone <user>@terra.mcs.anl.gov:/home/derivs/share/xaifBooster

    * Temporary CFR repository *
    <user>@terra.mcs.anl.gov:/home/utke/bk_tmpRep/xaifBooster_CFR/xaifBooster

  boost
    [get tarball from www.sourceforge.net or www.boost.org]

  angel
    [MCS bitkeeper /homes/utke/BK_Reps/CODE/angel]
    bk clone <user>@terra.mcs.anl.gov:/homes/utke/BK_Reps/CODE/angel

xaif-1.0
  bk clone http://xaif.bkbits.net/xaif-1.0

-----------------------------------------------------------------------------

CVSROOT=/home/naumann/CVSHOME

ALL/ACTS/TESTSUITE/REVERSE_MODE

=============================================================================

2. Building
--------------------

Please use the same C++ compiler for Open64, OpenAnalysis and OpenADFortTk!

1. Prepare env using OpenADFortTk/Sourceme-ACTS-{csh,sh}.
   
   Open and make sure paths in first section are correct.  Then source
   the appropriate file.

   source OpenADFortTk/Sourceme-ACTS-{csh,sh}


2. Build Open64's mfef90 (Open64 front end) and whirl2f (Open64 backend).
   Ensure the correct compiler is in your path.

   cd ${OPEN64ROOT}/crayf90/sgi
   make

   cd ${OPEN64ROOT}/whirl2f 
   make

   To build ir_b2a:

     cd ${OPEN64ROOT}/ir_tools
     make
   

3. Build OA.

   cd ${OPENANALYSIS_BASE}
   make CXX="<C++ compiler>" CXXFLAGS="<options such as -g or -O>"


4. Build XercesC++.

   cd ${XERCESC_BASE}
   make CXX="<C++ compiler>" CC="<C compiler>"


5. Build OpenADFortTk.

   Ensure the correct C++ compiler is used in
     ${OPENADFORTTK}/src/Makeinclude.config.${OPENADFORTTK_PLATFORM}

   cd ${OPENADFORTTK}/src
   make 


6. Build xaifbooster.

   cd ${XAIFBOOSTER_BASE}/xaifBooster
   make

   cd ${ANGEL_BASE}
   make

   cd ${XAIFBOOSTER_BASE}/xaifBooster
   make test


=============================================================================

3. Using
--------------------

If you are using a csh-variant, execute a 'rehash' command to ensure
that your path is fully searched.  On the other hand, bash should find
the binary with no problem.

The 'openad' script will run the whole pipeline.  E.g.,
  openad -v --bb --x2w-structured myprogram.f90

Type "openad --help" for more information.


=============================================================================
=============================================================================
[Prehistoric stuff]
=============================================================================

4. Brief comments on OpenADFortTk sources
--------------------

The sources are littered with FIXMEs and REMOVEs.  A great deal of
unnecesary whirl2f stuff has been removed, but there is still more
that will go.

Some files you may be interested in:

main.cxx         : the driver
whirl2xaif.cxx   : interface for WHIRL->XAIF translater; translation driver

wn2xaif.cxx      : top-level routines for translating WHIRL nodes
wn2xiaf_stmt.cxx : routines for translating WHIRL statements
wn2xaif_expr.cxx : routines for translating WHIRL expressions
wn2xaif_mem.cxx  : routines for translating WHIRL memory refs 
                   (references and assignments)
st2xaif.cxx      : routines for translating WHIRL symbol table entries
ty2xaif.cxx      : routines for translating WHIRL types

----

Pro64IRInterface.cxx/h : OpenAnalysis interface for Open64's IR
xmlostream.cxx/h       : xml::ostream class

=============================================================================

5. Misc
--------------------

Originaly based on whirl2f, whirl2xaif has been changed significantly:
  * removed dependency on some whirl2c files
  * removed several files: init.cxx, w2f_driver.cxx, ty2c.h,
    w2c_driver.h, etc.
  * replaced token_buffer (token_buffer.cxx/h) with xml::ostream
  * significantly cleaned up code

Currently the binaries are just stored with the build files in
${OPENADFORTTK}/obj/${OPENADFORTTK_PLATFORM}.  This directory is
automatically created during the build.

[whirl2xaif links with be.so. Building whirl2f will ensure the 
correct -Ddefines/symbols are included in be.so.]
