# $Header: /Volumes/cvsrep/developer/OpenADFortTk/README,v 1.5 2003/10/14 19:26:53 eraxxon Exp $
=============================================================================
==
== $Source: /Volumes/cvsrep/developer/OpenADFortTk/README,v $
==
== Location: ${WHIRL2XAIF}
==
=============================================================================

Contents:
  0. Obtaining
  1. Building
  2. Using
  3. Brief comments on whirl2xaif sources

=============================================================================

0. Obtaining
--------------------

Open64
  cvs co Open64

OpenAnalysis
  cvs co OpenAnalysis -r ValNum-init
  cvs update -j HEAD

xercesc [if necessary]
  cvs co xercesc

whirl2xaif
  cvs co whirl2xaif

xaifbooster
  
=============================================================================

1. Building on i686-Linux or sparc-SunOS
--------------------

Compiler: 
  - for i686-Linux, I would suggest using GCC 3.0.4 or greater.
  - for sparc-SunOS, Sun 5.3 is recommended

Please use the same compiler for Open64, OpenAnalysis and whirl2xaif.

Commands below are written for csh-variants.  For sh-variants replace
  setenv VARIABLE "value"
with
  export VARIABLE="value"


1. Prepare env. 
   
   See Sourceme-ACTS-csh (or Sourceme-ACTS-sh)

2. Build Open64's mfef90 (Open64 front end) and whirl2f (Open64 backend).
   Ensure the correct compiler is in your path.

   E.g., for i686-Linux:
     cd ${WHIRL2XAIF_OPEN64}/targ_ia32_ia64_linux/crayf90/sgi
     make MAKE="make"

     cd ${WHIRL2XAIF_OPEN64}/targ_ia32_ia64_linux/whirl2f 
     make MAKE="make"

   
3. Build OA.

   cd OpenAnalysis
   make CXX="<C++ compiler>" CXXFLAGS="<options such as -g or -O>"

4. Build XercesC++ [if necessary]:

   cd xercesc
   make CXX="<C++ compiler>" CC="<C compiler>"

5. Build whirl2xaif:

   Ensure the correct C++ compiler is used in
     ${WHIRL2XAIF}/src/Makeinclude.config.${WHIRL2XAIF_PLATFORM}

   cd ${WHIRL2XAIF}/src
   make 

6. xaifbooster...

=============================================================================

2. Using
--------------------

Currently the binary -- whirl2xaif -- is just stored with the build
files in ${WHIRL2XAIF}/obj/${WHIRL2XAIF_PLATFORM}.  This directory was
automatically created during the build.

If you are using a csh-variant, execute a 'rehash' command to ensure
that your path is fully searched.  On the other hand, bash should find
the binary with no problem.

The whole pipeline:

  mfef90 file.f --> file.B
  whirl2xaif file.B --> file.xaif
  
  xaifbooster --> file.boost.xaif
  
  xaif2whirl file.B file.boost.xaif --> file.boost.x2w.B
  whirl2f file.boost.x2w.B --> file.boost.x2w.w2f.f
  perl pp.pl file.boost.x2w.w2f.f --> file.boost.x2w.w2f.pp.f

=============================================================================

3. Brief comments on whirl2xaif sources
--------------------

The sources are littered with FIXMEs and REMOVEs.  A great deal of
unnecesary whirl2f stuff has been removed, but there is still more
that will go.

Some files you may be interested in:

main.cxx        : the driver
whirl2xaif.cxx  : interface for WHIRL->XAIF translater; translation driver

wn2xaif.cxx      : top-level routines for translating WHIRL nodes
wn2xiaf_stmt.cxx : routines for translating WHIRL statements
wn2xaif_expr.cxx : routines for translating WHIRL expressions
wn2xaif_mem.cxx  : routines for translating WHIRL memory refs 
                   (references and assignments)
st2xaif.cxx      : routines for translating WHIRL symbol table entries
ty2xaif.cxx      : routines for translating WHIRL types

Pro64IRInterface.cxx/h : OpenAnalysis interface for Open64's IR
xmlostream.cxx/h       : xml::ostream class

=============================================================================

=============================================================================

Extra notes for now: 

Whirl2xaif Notes: 
  - generally assume that we enter with the proper context.
  - generally assume we enter with the stream the way it should be (do
    not need extra new lines or spaces).
  - the context generally represents the XAIF (the translated content)
    not the past WHIRL content.

Symbol table notes in st2xaif.cxx

[add emails to Mike here]

   [whirl2xaif links with be.so. Building whirl2f will ensure the 
   correct -Ddefines/symbols are included in be.so.)
