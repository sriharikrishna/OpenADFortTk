# $Header: /Volumes/cvsrep/developer/OpenADFortTk/README,v 1.9 2003/11/25 16:18:12 eraxxon Exp $
=============================================================================
==
== $Source: /Volumes/cvsrep/developer/OpenADFortTk/README,v $
==
== Location: ${WHIRL2XAIF}
==
=============================================================================

Contents:
  0. Obtaining
  1. Building
  2. Using

=============================================================================

0. Obtaining
--------------------

Open64
  cvs co Open64

OpenAnalysis
  cvs co -r ValNum-init OpenAnalysis
  cd OpenAnalysis ; cvs update -j HEAD

xercesc [if necessary]
  cvs co xercesc

whirl2xaif
  cvs co whirl2xaif

xaifbooster, angel, boost
  [respectively: Argonne bitkeeper /home/derivs/share/xaifBooster, 
   www.sourceforge.net, www.boost.org]

xaif-1.0
  [bitkeeper: xaif.bkbits.net/xaif-1.0]

=============================================================================

1. Building on i686-Linux or sparc-SunOS
--------------------

Compiler: 
  - for i686-Linux, Open64 has problems with GCC 3.1 and 3.2.  Suggest 
    3.3 or greater.
  - for sparc-SunOS, Sun 5.3 is recommended

Please use the same compiler for Open64, OpenAnalysis and whirl2xaif.


1. Prepare env using whirl2xaif/Sourceme-ACTS-csh/sh.
   
   Open and make sure paths in first section are correct.  Then source
   the file.

   source whirl2xaif/Sourceme-ACTS-csh


2. Build Open64's mfef90 (Open64 front end) and whirl2f (Open64 backend).
   Ensure the correct compiler is in your path.

   cd ${OPEN64TARG}/crayf90/sgi
   make

   cd ${OPEN64TARG}/whirl2f 
   make

   To build ir_b2a:

     cd ${OPEN64TARG}/ir_tools
     make
   

3. Build OA.

   cd ${WHIRL2XAIF_OA}
   make CXX="<C++ compiler>" CXXFLAGS="<options such as -g or -O>"


4. Build XercesC++ [if necessary]:

   cd ${WHIRL2XAIF_XERCESC}
   make CXX="<C++ compiler>" CC="<C compiler>"


5. Build whirl2xaif:

   Ensure the correct C++ compiler is used in
     ${WHIRL2XAIF}/src/Makeinclude.config.${WHIRL2XAIF_PLATFORM}

   cd ${WHIRL2XAIF}/src
   make 


6. xaifbooster
 
   cd ${XAIFBOOSTERROOT}
   make

   cd ${ANGELROOT}
   make

   cd ${XAIFBOOSTERROOT}
   make test


=============================================================================

2. Using
--------------------

If you are using a csh-variant, execute a 'rehash' command to ensure
that your path is fully searched.  On the other hand, bash should find
the binary with no problem.

The whole pipeline:

  mfef90 file.f90 --> file.B
  whirl2xaif file.B --> file.xaif
  
  xboost_bb -i file.xaif -o file.boost.xaif

    Note: Add following line to top of output file:
    <?xml version="1.0" encoding="UTF-8"?>
  
  xaif2whirl file.B file.boost.xaif --> file.boost.x2w.B
  whirl2f file.boost.x2w.B --> file.boost.x2w.w2f.f
  perl pp.pl file.boost.x2w.w2f.f --> file.boost.x2w.w2f.pp.f


=============================================================================
=============================================================================
=============================================================================

3. Brief comments on whirl2xaif sources
--------------------

The sources are littered with FIXMEs and REMOVEs.  A great deal of
unnecesary whirl2f stuff has been removed, but there is still more
that will go.

Some files you may be interested in:

main.cxx         : the driver
whirl2xaif.cxx   : interface for WHIRL->XAIF translater; translation driver

wn2xaif.cxx      : top-level routines for translating WHIRL nodes
wn2xiaf_stmt.cxx : routines for translating WHIRL statements
wn2xaif_expr.cxx : routines for translating WHIRL expressions
wn2xaif_mem.cxx  : routines for translating WHIRL memory refs 
                   (references and assignments)
st2xaif.cxx      : routines for translating WHIRL symbol table entries
ty2xaif.cxx      : routines for translating WHIRL types

----

Pro64IRInterface.cxx/h : OpenAnalysis interface for Open64's IR
xmlostream.cxx/h       : xml::ostream class

=============================================================================

4. Misc
--------------------

Originaly based on whirl2f, whirl2xaif has been changed significantly:
  * removed dependency on some whirl2c files
  * removed several files: init.cxx, w2f_driver.cxx, ty2c.h,
    w2c_driver.h, etc.
  * replaced token_buffer (token_buffer.cxx/h) with xml::ostream
  * significantly cleaned up code

Currently the binaries are just stored with the build files in
${WHIRL2XAIF}/obj/${WHIRL2XAIF_PLATFORM}.  This directory is
automatically created during the build.

[whirl2xaif links with be.so. Building whirl2f will ensure the 
correct -Ddefines/symbols are included in be.so.]
