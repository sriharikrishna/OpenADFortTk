use FindBin qw($RealBin);
use lib "$RealBin/../Lib";
use lib "$RealBin/../Lib/FT";
use Test::More qw(no_plan);

use Ffile;
use FTscan;
use FTpat;
use FTUnit;
use ADxaif;
use ADinline;
use ADtemplate;

use PPsetup;

setup();

ADxaif::set_old();

$inl = ADinline->new(Ffile->new_from_heredoc($inl_ff));
$template = ADtemplate->new(Ffile->new_from_heredoc($templ_ff));

$ff = Ffile->new_from_heredoc($ff_src);

$ff1 = $ff->rewrite_sem(\&xaifpp);

is($ff1->to_string(),$w2f1_pp,'xaif pp ok');

$ff2 = $ff1->rewrite($inl->inline());

is($ff2->to_string(),$inl_src,'After inlining');

@units = FTUnit->new($ff2)->units();

is(@units+0,1,'num units in inlined file');
is($units[0]->to_string(),$u1,'1st unit');

$ti1 = $template->instantiate($units[0]);
is($ti1->to_string(),$ti1res,'instantiate unit 1');

@inl_units = map {$template->instantiate($_)} @units;

is($inl_units[0]->to_string(),$ti1res,'template 1st unit');
is(fconcat(@inl_units)->to_string(),$ti1res,'concat all units');

teardown();

sub setup{
    $ti1res = <<'T1RES';
       subroutine head(X,Y,call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
      type(active) :: OpenAD_Symbol_2
      type(active) :: OpenAD_Symbol_11
      type(active) :: OpenAD_Symbol_3
      type(active) :: OpenAD_Symbol_12
      type(active) :: OpenAD_Symbol_4
      type(active) :: OpenAD_Symbol_13
      type(active) :: OpenAD_Symbol_5
      type(active) :: OpenAD_Symbol_14
      type(active) :: OpenAD_Symbol_6
      type(active) :: OpenAD_Symbol_20
      type(active) :: OpenAD_Symbol_15
      type(active) :: OpenAD_Symbol_7
      type(active) :: OpenAD_Symbol_21
      type(active) :: OpenAD_Symbol_16
      type(active) :: OpenAD_Symbol_8
      type(active) :: OpenAD_Symbol_17
      type(active) :: OpenAD_Symbol_9
      type(active) :: OpenAD_Symbol_18
      type(active) :: OpenAD_Symbol_19
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
      type(active) :: OpenAD_Symbol_22
      type(active) :: OpenAD_Symbol_23
      type(active) :: OpenAD_Symbol_24
      type(active) :: OpenAD_Symbol_25
      type(active) :: OpenAD_Symbol_26
      type(active) :: OpenAD_Symbol_27
      INTEGER(w2f__i4) OpenAD_Symbol_28
      INTEGER(w2f__i4) OpenAD_Symbol_29
C
C     **** statements ****
C

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
            case (2) 
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      OpenAD_Symbol_1%v = X%v
      T1%v = OpenAD_Symbol_2%v
      OpenAD_Symbol_7%v = (Y%v+X%v*T1%v)
      OpenAD_Symbol_3%v = 1
      OpenAD_Symbol_5%v = T1%v
      OpenAD_Symbol_6%v = X%v
      OpenAD_Symbol_4%v = 1
      T2%v = OpenAD_Symbol_7%v
      Y%v = (T1%v+T2%v)
      OpenAD_Symbol_8%v = 1
      OpenAD_Symbol_9%v = 1
      OpenAD_Symbol_10%v = (OpenAD_Symbol_5%v+OpenAD_Symbol_0%v*OpenAD_S
     +ymbol_6%v)
      OpenAD_Symbol_11%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_6%v)
      OpenAD_Symbol_12%v = (OpenAD_Symbol_0%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_13%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_14%v = (OpenAD_Symbol_10%v*OpenAD_Symbol_4%v)
      OpenAD_Symbol_16%v = (OpenAD_Symbol_3%v+OpenAD_Symbol_11%v*OpenAD_
     +Symbol_4%v)
      OpenAD_Symbol_18%v = (OpenAD_Symbol_13%v+OpenAD_Symbol_16%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_19%v = (OpenAD_Symbol_12%v+OpenAD_Symbol_14%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_20%v = OpenAD_Symbol_0%v
      OpenAD_Symbol_21%v = OpenAD_Symbol_1%v
          double_tape(double_tape_pointer) = OpenAD_Symbol_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_16
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_18
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_20
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_21
          double_tape_pointer = double_tape_pointer+1
      RETURN
            case (3) 
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_22 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T1%d*OpenAD_Symbol_22
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_23 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T1%d*OpenAD_Symbol_23
          T1%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_24 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+Y%d*OpenAD_Symbol_24
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_25 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+Y%d*OpenAD_Symbol_25
          Y%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_26 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T2%d*OpenAD_Symbol_26
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_27 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T2%d*OpenAD_Symbol_27
          T2%d = 0.0d0
      OpenAD_Symbol_28 = 1
          X%d = X%d+OpenAD_Symbol_15%d*OpenAD_Symbol_28
          OpenAD_Symbol_15%d = 0.0d0
      OpenAD_Symbol_29 = 1
          Y%d = Y%d+OpenAD_Symbol_17%d*OpenAD_Symbol_29
          OpenAD_Symbol_17%d = 0.0d0
          end select

        end subroutine head
T1RES
    $u1 = <<'U1';
C ***********************************************************
C Fortran file translated from WHIRL XXX
C ***********************************************************
C ***********************************************************

      SUBROUTINE head(X, Y)
      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
      type(active) :: OpenAD_Symbol_2
      type(active) :: OpenAD_Symbol_11
      type(active) :: OpenAD_Symbol_3
      type(active) :: OpenAD_Symbol_12
      type(active) :: OpenAD_Symbol_4
      type(active) :: OpenAD_Symbol_13
      type(active) :: OpenAD_Symbol_5
      type(active) :: OpenAD_Symbol_14
      type(active) :: OpenAD_Symbol_6
      type(active) :: OpenAD_Symbol_20
      type(active) :: OpenAD_Symbol_15
      type(active) :: OpenAD_Symbol_7
      type(active) :: OpenAD_Symbol_21
      type(active) :: OpenAD_Symbol_16
      type(active) :: OpenAD_Symbol_8
      type(active) :: OpenAD_Symbol_17
      type(active) :: OpenAD_Symbol_9
      type(active) :: OpenAD_Symbol_18
      type(active) :: OpenAD_Symbol_19
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
      type(active) :: OpenAD_Symbol_22
      type(active) :: OpenAD_Symbol_23
      type(active) :: OpenAD_Symbol_24
      type(active) :: OpenAD_Symbol_25
      type(active) :: OpenAD_Symbol_26
      type(active) :: OpenAD_Symbol_27
      INTEGER(w2f__i4) OpenAD_Symbol_28
      INTEGER(w2f__i4) OpenAD_Symbol_29
C
C     **** statements ****
C
C     $OpenAD BEGIN REPLACEMENT 1
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 2
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      OpenAD_Symbol_1%v = X%v
      T1%v = OpenAD_Symbol_2%v
      OpenAD_Symbol_7%v = (Y%v+X%v*T1%v)
      OpenAD_Symbol_3%v = 1
      OpenAD_Symbol_5%v = T1%v
      OpenAD_Symbol_6%v = X%v
      OpenAD_Symbol_4%v = 1
      T2%v = OpenAD_Symbol_7%v
      Y%v = (T1%v+T2%v)
      OpenAD_Symbol_8%v = 1
      OpenAD_Symbol_9%v = 1
      OpenAD_Symbol_10%v = (OpenAD_Symbol_5%v+OpenAD_Symbol_0%v*OpenAD_S
     +ymbol_6%v)
      OpenAD_Symbol_11%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_6%v)
      OpenAD_Symbol_12%v = (OpenAD_Symbol_0%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_13%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_14%v = (OpenAD_Symbol_10%v*OpenAD_Symbol_4%v)
      OpenAD_Symbol_16%v = (OpenAD_Symbol_3%v+OpenAD_Symbol_11%v*OpenAD_
     +Symbol_4%v)
      OpenAD_Symbol_18%v = (OpenAD_Symbol_13%v+OpenAD_Symbol_16%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_19%v = (OpenAD_Symbol_12%v+OpenAD_Symbol_14%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_20%v = OpenAD_Symbol_0%v
      OpenAD_Symbol_21%v = OpenAD_Symbol_1%v
          double_tape(double_tape_pointer) = OpenAD_Symbol_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_16
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_18
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_20
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_21
          double_tape_pointer = double_tape_pointer+1
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 3
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_22 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T1%d*OpenAD_Symbol_22
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_23 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T1%d*OpenAD_Symbol_23
          T1%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_24 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+Y%d*OpenAD_Symbol_24
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_25 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+Y%d*OpenAD_Symbol_25
          Y%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_26 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T2%d*OpenAD_Symbol_26
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_27 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T2%d*OpenAD_Symbol_27
          T2%d = 0.0d0
      OpenAD_Symbol_28 = 1
          X%d = X%d+OpenAD_Symbol_15%d*OpenAD_Symbol_28
          OpenAD_Symbol_15%d = 0.0d0
      OpenAD_Symbol_29 = 1
          Y%d = Y%d+OpenAD_Symbol_17%d*OpenAD_Symbol_29
          OpenAD_Symbol_17%d = 0.0d0
C     $OpenAD END REPLACEMENT
      END SUBROUTINE
U1
    $inl_ff = <<'INL';
        subroutine push(x)
C $OpenAD  INLINE DECLS
          use OpenAD_tape
          implicit none
          double precision :: x

C   $OpenAD END DECLS
          double_tape(double_tape_pointer)=x
          double_tape_pointer=double_tape_pointer+1
        end subroutine push
        subroutine pop(x)
C $OpenAD  INLINE DECLS
          use OpenAD_tape
          implicit none
          double precision :: x

C   $OpenAD END DECLS
          double_tape_pointer=double_tape_pointer-1
          x=double_tape(double_tape_pointer)
        end subroutine pop
        subroutine saxpy(a,x,y)
C $OpenAD  INLINE DECLS
          double precision, intent(in) :: a
          type(active), intent(in) :: x
          type(active), intent(inout) :: y
        
C   $OpenAD END DECLS
          y%d=y%d+x%d*a
        end subroutine saxpy
        subroutine zeroderiv(x)
C $OpenAD  INLINE DECLS
          type(active), intent(out) :: x

C   $OpenAD END DECLS
          x%d=0.0d0
        end subroutine zeroderiv
INL
    $templ_ff = <<'TEMPLATE';
        subroutine template(call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

!$TEMPLATE_PRAGMA_DECLARATIONS

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
!$PLACEHOLDER_PRAGMA$ id=1
            case (2) 
!$PLACEHOLDER_PRAGMA$ id=2
            case (3) 
!$PLACEHOLDER_PRAGMA$ id=3
          end select

        end subroutine template
TEMPLATE
    $ff_src = <<'FF';
C ***********************************************************
C Fortran file translated from WHIRL XXX
C ***********************************************************
C ***********************************************************

      SUBROUTINE head(X, Y)
      use w2f__types
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
      REAL(w2f__8) OpenAD_Symbol_10
      REAL(w2f__8) OpenAD_Symbol_2
      REAL(w2f__8) OpenAD_Symbol_11
      REAL(w2f__8) OpenAD_Symbol_3
      REAL(w2f__8) OpenAD_Symbol_12
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_13
      REAL(w2f__8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_Symbol_14
      REAL(w2f__8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_20
      REAL(w2f__8) OpenAD_Symbol_15
      REAL(w2f__8) OpenAD_Symbol_7
      REAL(w2f__8) OpenAD_Symbol_21
      REAL(w2f__8) OpenAD_Symbol_16
      REAL(w2f__8) OpenAD_Symbol_8
      REAL(w2f__8) OpenAD_Symbol_17
      REAL(w2f__8) OpenAD_Symbol_9
      REAL(w2f__8) OpenAD_Symbol_18
      REAL(w2f__8) OpenAD_Symbol_19
C
C     **** Parameters and Result ****
C
      REAL(w2f__8) X
      INTENT(IN)  X
      REAL(w2f__8) Y
C
C     **** Local Variables and functions ****
C
      REAL(w2f__8) T1
      REAL(w2f__8) T2
      REAL(w2f__8) OpenAD_Symbol_22
      REAL(w2f__8) OpenAD_Symbol_23
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      REAL(w2f__8) OpenAD_Symbol_26
      REAL(w2f__8) OpenAD_Symbol_27
      INTEGER(w2f__i4) OpenAD_Symbol_28
      INTEGER(w2f__i4) OpenAD_Symbol_29
C
C     **** statements ****
C
C     $OpenAD BEGIN REPLACEMENT 1
      __value__(T1) = (__value__(X) * __value__(Y))
      __value__(T2) = (__value__(Y) + __value__(X) * __value__(T1))
      __value__(Y) = (__value__(T1) + __value__(T2))
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 2
      __value__(OpenAD_Symbol_2) = (__value__(X) * __value__(Y))
      __value__(OpenAD_Symbol_0) = __value__(Y)
      __value__(OpenAD_Symbol_1) = __value__(X)
      __value__(T1) = __value__(OpenAD_Symbol_2)
      __value__(OpenAD_Symbol_7) = (__value__(Y) + __value__(X) *
     >  __value__(T1))
      __value__(OpenAD_Symbol_3) = 1
      __value__(OpenAD_Symbol_5) = __value__(T1)
      __value__(OpenAD_Symbol_6) = __value__(X)
      __value__(OpenAD_Symbol_4) = 1
      __value__(T2) = __value__(OpenAD_Symbol_7)
      __value__(Y) = (__value__(T1) + __value__(T2))
      __value__(OpenAD_Symbol_8) = 1
      __value__(OpenAD_Symbol_9) = 1
      __value__(OpenAD_Symbol_10) = (__value__(OpenAD_Symbol_5) +
     >  __value__(OpenAD_Symbol_0) * __value__(OpenAD_Symbol_6))
      __value__(OpenAD_Symbol_11) = (__value__(OpenAD_Symbol_1) *
     >  __value__(OpenAD_Symbol_6))
      __value__(OpenAD_Symbol_12) = (__value__(OpenAD_Symbol_0) *
     >  __value__(OpenAD_Symbol_8))
      __value__(OpenAD_Symbol_13) = (__value__(OpenAD_Symbol_1) *
     >  __value__(OpenAD_Symbol_8))
      __value__(OpenAD_Symbol_14) = (__value__(OpenAD_Symbol_10) *
     >  __value__(OpenAD_Symbol_4))
      __value__(OpenAD_Symbol_16) = (__value__(OpenAD_Symbol_3) +
     >  __value__(OpenAD_Symbol_11) * __value__(OpenAD_Symbol_4))
      __value__(OpenAD_Symbol_18) = (__value__(OpenAD_Symbol_13) +
     >  __value__(OpenAD_Symbol_16) * __value__(OpenAD_Symbol_9))
      __value__(OpenAD_Symbol_19) = (__value__(OpenAD_Symbol_12) +
     >  __value__(OpenAD_Symbol_14) * __value__(OpenAD_Symbol_9))
      __value__(OpenAD_Symbol_20) = __value__(OpenAD_Symbol_0)
      __value__(OpenAD_Symbol_21) = __value__(OpenAD_Symbol_1)
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_14))
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_16))
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_18))
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_19))
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_20))
C     $OpenAD INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_21))
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 3
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_22))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_22), __deriv__(T1), __deriv__(
     > OpenAD_Symbol_17))
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_23))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_23), __deriv__(T1), __deriv__(
     > OpenAD_Symbol_15))
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(T1))
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_24))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_24), __deriv__(Y), __deriv__(
     > OpenAD_Symbol_15))
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_25))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_25), __deriv__(Y), __deriv__(
     > OpenAD_Symbol_17))
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(Y))
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_26))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_26), __deriv__(T2), __deriv__(
     > OpenAD_Symbol_17))
C     $OpenAD INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_27))
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_27), __deriv__(T2), __deriv__(
     > OpenAD_Symbol_15))
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(T2))
      OpenAD_Symbol_28 = 1
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_28, __deriv__(OpenAD_Symbol_15),
     >  __deriv__(X))
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(OpenAD_Symbol_15))
      OpenAD_Symbol_29 = 1
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_29, __deriv__(OpenAD_Symbol_17),
     >  __deriv__(Y))
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(OpenAD_Symbol_17))
C     $OpenAD END REPLACEMENT
      END SUBROUTINE
FF
    $w2f1_pp = <<'W2F1PP';
C ***********************************************************
C Fortran file translated from WHIRL XXX
C ***********************************************************
C ***********************************************************

      SUBROUTINE head(X, Y)
      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
      type(active) :: OpenAD_Symbol_2
      type(active) :: OpenAD_Symbol_11
      type(active) :: OpenAD_Symbol_3
      type(active) :: OpenAD_Symbol_12
      type(active) :: OpenAD_Symbol_4
      type(active) :: OpenAD_Symbol_13
      type(active) :: OpenAD_Symbol_5
      type(active) :: OpenAD_Symbol_14
      type(active) :: OpenAD_Symbol_6
      type(active) :: OpenAD_Symbol_20
      type(active) :: OpenAD_Symbol_15
      type(active) :: OpenAD_Symbol_7
      type(active) :: OpenAD_Symbol_21
      type(active) :: OpenAD_Symbol_16
      type(active) :: OpenAD_Symbol_8
      type(active) :: OpenAD_Symbol_17
      type(active) :: OpenAD_Symbol_9
      type(active) :: OpenAD_Symbol_18
      type(active) :: OpenAD_Symbol_19
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
      type(active) :: OpenAD_Symbol_22
      type(active) :: OpenAD_Symbol_23
      type(active) :: OpenAD_Symbol_24
      type(active) :: OpenAD_Symbol_25
      type(active) :: OpenAD_Symbol_26
      type(active) :: OpenAD_Symbol_27
      INTEGER(w2f__i4) OpenAD_Symbol_28
      INTEGER(w2f__i4) OpenAD_Symbol_29
C
C     **** statements ****
C
C     $OpenAD BEGIN REPLACEMENT 1
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 2
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      OpenAD_Symbol_1%v = X%v
      T1%v = OpenAD_Symbol_2%v
      OpenAD_Symbol_7%v = (Y%v+X%v*T1%v)
      OpenAD_Symbol_3%v = 1
      OpenAD_Symbol_5%v = T1%v
      OpenAD_Symbol_6%v = X%v
      OpenAD_Symbol_4%v = 1
      T2%v = OpenAD_Symbol_7%v
      Y%v = (T1%v+T2%v)
      OpenAD_Symbol_8%v = 1
      OpenAD_Symbol_9%v = 1
      OpenAD_Symbol_10%v = (OpenAD_Symbol_5%v+OpenAD_Symbol_0%v*OpenAD_S
     +ymbol_6%v)
      OpenAD_Symbol_11%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_6%v)
      OpenAD_Symbol_12%v = (OpenAD_Symbol_0%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_13%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_14%v = (OpenAD_Symbol_10%v*OpenAD_Symbol_4%v)
      OpenAD_Symbol_16%v = (OpenAD_Symbol_3%v+OpenAD_Symbol_11%v*OpenAD_
     +Symbol_4%v)
      OpenAD_Symbol_18%v = (OpenAD_Symbol_13%v+OpenAD_Symbol_16%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_19%v = (OpenAD_Symbol_12%v+OpenAD_Symbol_14%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_20%v = OpenAD_Symbol_0%v
      OpenAD_Symbol_21%v = OpenAD_Symbol_1%v
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_14)
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_16)
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_18)
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_19)
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_20)
C     $OpenAD INLINE push(subst)
      CALL push(OpenAD_Symbol_21)
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 3
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_22)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_23)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_23,T1,OpenAD_Symbol_15)
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(T1)
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_24)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_24,Y,OpenAD_Symbol_15)
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_25)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_25,Y,OpenAD_Symbol_17)
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(Y)
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_26)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_26,T2,OpenAD_Symbol_17)
C     $OpenAD INLINE Pop(subst)
      CALL Pop(OpenAD_Symbol_27)
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_27,T2,OpenAD_Symbol_15)
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(T2)
      OpenAD_Symbol_28 = 1
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_28,OpenAD_Symbol_15,X)
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(OpenAD_Symbol_15)
      OpenAD_Symbol_29 = 1
C     $OpenAD INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_29,OpenAD_Symbol_17,Y)
C     $OpenAD INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(OpenAD_Symbol_17)
C     $OpenAD END REPLACEMENT
      END SUBROUTINE
W2F1PP
    $inl_src = <<'INL_SRC';
C ***********************************************************
C Fortran file translated from WHIRL XXX
C ***********************************************************
C ***********************************************************

      SUBROUTINE head(X, Y)
      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
      type(active) :: OpenAD_Symbol_2
      type(active) :: OpenAD_Symbol_11
      type(active) :: OpenAD_Symbol_3
      type(active) :: OpenAD_Symbol_12
      type(active) :: OpenAD_Symbol_4
      type(active) :: OpenAD_Symbol_13
      type(active) :: OpenAD_Symbol_5
      type(active) :: OpenAD_Symbol_14
      type(active) :: OpenAD_Symbol_6
      type(active) :: OpenAD_Symbol_20
      type(active) :: OpenAD_Symbol_15
      type(active) :: OpenAD_Symbol_7
      type(active) :: OpenAD_Symbol_21
      type(active) :: OpenAD_Symbol_16
      type(active) :: OpenAD_Symbol_8
      type(active) :: OpenAD_Symbol_17
      type(active) :: OpenAD_Symbol_9
      type(active) :: OpenAD_Symbol_18
      type(active) :: OpenAD_Symbol_19
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
      type(active) :: OpenAD_Symbol_22
      type(active) :: OpenAD_Symbol_23
      type(active) :: OpenAD_Symbol_24
      type(active) :: OpenAD_Symbol_25
      type(active) :: OpenAD_Symbol_26
      type(active) :: OpenAD_Symbol_27
      INTEGER(w2f__i4) OpenAD_Symbol_28
      INTEGER(w2f__i4) OpenAD_Symbol_29
C
C     **** statements ****
C
C     $OpenAD BEGIN REPLACEMENT 1
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 2
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      OpenAD_Symbol_1%v = X%v
      T1%v = OpenAD_Symbol_2%v
      OpenAD_Symbol_7%v = (Y%v+X%v*T1%v)
      OpenAD_Symbol_3%v = 1
      OpenAD_Symbol_5%v = T1%v
      OpenAD_Symbol_6%v = X%v
      OpenAD_Symbol_4%v = 1
      T2%v = OpenAD_Symbol_7%v
      Y%v = (T1%v+T2%v)
      OpenAD_Symbol_8%v = 1
      OpenAD_Symbol_9%v = 1
      OpenAD_Symbol_10%v = (OpenAD_Symbol_5%v+OpenAD_Symbol_0%v*OpenAD_S
     +ymbol_6%v)
      OpenAD_Symbol_11%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_6%v)
      OpenAD_Symbol_12%v = (OpenAD_Symbol_0%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_13%v = (OpenAD_Symbol_1%v*OpenAD_Symbol_8%v)
      OpenAD_Symbol_14%v = (OpenAD_Symbol_10%v*OpenAD_Symbol_4%v)
      OpenAD_Symbol_16%v = (OpenAD_Symbol_3%v+OpenAD_Symbol_11%v*OpenAD_
     +Symbol_4%v)
      OpenAD_Symbol_18%v = (OpenAD_Symbol_13%v+OpenAD_Symbol_16%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_19%v = (OpenAD_Symbol_12%v+OpenAD_Symbol_14%v*OpenAD
     +_Symbol_9%v)
      OpenAD_Symbol_20%v = OpenAD_Symbol_0%v
      OpenAD_Symbol_21%v = OpenAD_Symbol_1%v
          double_tape(double_tape_pointer) = OpenAD_Symbol_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_16
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_18
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_20
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_21
          double_tape_pointer = double_tape_pointer+1
      RETURN
C     $OpenAD END REPLACEMENT
C     $OpenAD BEGIN REPLACEMENT 3
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_22 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T1%d*OpenAD_Symbol_22
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_23 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T1%d*OpenAD_Symbol_23
          T1%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_24 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+Y%d*OpenAD_Symbol_24
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_25 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+Y%d*OpenAD_Symbol_25
          Y%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_26 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T2%d*OpenAD_Symbol_26
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_27 = double_tape(double_tape_pointer)
          OpenAD_Symbol_15%d = OpenAD_Symbol_15%d+T2%d*OpenAD_Symbol_27
          T2%d = 0.0d0
      OpenAD_Symbol_28 = 1
          X%d = X%d+OpenAD_Symbol_15%d*OpenAD_Symbol_28
          OpenAD_Symbol_15%d = 0.0d0
      OpenAD_Symbol_29 = 1
          Y%d = Y%d+OpenAD_Symbol_17%d*OpenAD_Symbol_29
          OpenAD_Symbol_17%d = 0.0d0
C     $OpenAD END REPLACEMENT
      END SUBROUTINE
INL_SRC
}

sub teardown{
    ;
}

