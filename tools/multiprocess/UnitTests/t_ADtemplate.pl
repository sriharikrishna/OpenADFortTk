use FindBin qw($RealBin);
use lib "$RealBin/../Lib";
use lib "$RealBin/../Lib/FT";
use Test::More qw(no_plan);

use Ffile;
use FTscan;
use FTpat;
use ADtemplate;

use PPsetup;

setup();

$t1 = ADtemplate->new($f1);

is(ref($t1),'ADtemplate','template creation');

%i = ADtemplate::get_template_info($s1);
is($i{name},'head','routine name');
is($i{args},'X,Y','params');
is($i{decls}->[1],"      use active_module\n",'decls');
is(@{$i{frags}}+0,3,'num fragments');
is($i{frags}->[1]->[1],"      OpenAD_Symbol_0%v = Y%v\n",'line 2, frag 2');
is($i{frags}->[2]->[2],
   "      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)\n",
   'line 3, frag 3');


is($t1->instantiate($s1)->to_string(),$r1,'instantiate');
is($t1->{ff}->to_string,$f1->to_string,'stored template unchanged');
is($t1->instantiate($s2)->to_string(),$r2,'instantiate 2');

teardown();

sub setup {
    $f1 = Ffile->new_from_heredoc(<<'F1');
        subroutine template(call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

!$TEMPLATE_PRAGMA_DECLARATIONS

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
!$PLACEHOLDER_PRAGMA$ id=1
            case (2) 
!$PLACEHOLDER_PRAGMA$ id=2
            case (3) 
!$PLACEHOLDER_PRAGMA$ id=3
          end select

        end subroutine template
F1
    $s1 = Ffile->new_from_heredoc(<<'S1');
C ***********************************************************
C Fortran file translated from WHIRL XXX
C ***********************************************************
C ***********************************************************

      SUBROUTINE head(X, Y)
      use w2f__types
      use active_module
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
C
C     **** statements ****
C
C     $OpenAD$ BEGIN REPLACEMENT 1
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 2
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 3
      CALL Pop(OpenAD_Symbol_22)
C     $OpenAD$ INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)
      CALL ZeroDeriv(OpenAD_Symbol_17)
C     $OpenAD$ END REPLACEMENT
      END SUBROUTINE
S1
    $r1 = <<'R1';
       subroutine head(X,Y,call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
C
C     **** Global Variables ****
C
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
      type(active) :: OpenAD_Symbol_10
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y
C
C     **** Local Variables and functions ****
C
      type(active) :: T1
      type(active) :: T2
C
C     **** statements ****
C

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
            case (2) 
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
            case (3) 
      CALL Pop(OpenAD_Symbol_22)
C     $OpenAD$ INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)
      CALL ZeroDeriv(OpenAD_Symbol_17)
          end select

        end subroutine head
R1
    $s2 = Ffile->new_from_heredoc(<<'S2');
      SUBROUTINE a_new_head(z,w,t)
      use w2f__types
      use active_module
      IMPLICIT NONE
      type(active) :: OpenAD_Symbol_12
      type(active) :: z
      INTENT(IN)  z
      type(active) :: w
C
C     **** statements ****
C
C     $OpenAD$ BEGIN REPLACEMENT 1
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 2
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      CALL push(OpenAD_Symbol_21)
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 3
      CALL Pop(OpenAD_Symbol_22)
      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)
      OpenAD_Symbol_28 = 1
      CALL ZeroDeriv(OpenAD_Symbol_17)
C     $OpenAD$ END REPLACEMENT
      END SUBROUTINE
S2
    $r2 = <<'R2';
       subroutine a_new_head(z,w,t,call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
      type(active) :: OpenAD_Symbol_12
      type(active) :: z
      INTENT(IN)  z
      type(active) :: w
C
C     **** statements ****
C

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
            case (2) 
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      CALL push(OpenAD_Symbol_21)
      RETURN
            case (3) 
      CALL Pop(OpenAD_Symbol_22)
      CALL Saxpy(OpenAD_Symbol_22,T1,OpenAD_Symbol_17)
      OpenAD_Symbol_28 = 1
      CALL ZeroDeriv(OpenAD_Symbol_17)
          end select

        end subroutine a_new_head
R2
}

sub teardown {
    ;
}
