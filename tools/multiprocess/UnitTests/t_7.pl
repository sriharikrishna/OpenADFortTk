use FindBin qw($RealBin);
use lib "$RealBin/../Lib";
use lib "$RealBin/../Lib/FT";
use Test::More qw(no_plan);

use Ffile;
use FTscan;
use FTpat;
use FTUnit;

use ADxaif;
use ADinline;
use ADtemplate;

use PPsetup;

setup();

$inl = ADinline->new(Ffile->new_from_heredoc($inl_ff));
$template = ADtemplate->new(Ffile->new_from_heredoc($templ_ff));

$ff = Ffile->new_from_heredoc($ff_src);

$ffi = $ff->rewrite_sem(\&xaifpp)->rewrite($inl->inline());

$ffit = fconcat( map {$template->instantiate($_)} FTUnit->new($ffi)->units() );

is($ffit->to_string(),$res,'AD open transform');

teardown();

sub setup {
    $res = <<'RES';
       subroutine top(z,call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      type(active) :: OpenAD_Symbol_0
      type(active) :: z
      type(active) :: T2
C
C     **** statements ****
C

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
      T1%v = (X%v*Y%v)
      RETURN
            case (2) 
      OpenAD_Symbol_7%v = (junk%v+X%v*T1%v)
          double_tape(double_tape_pointer) = OpenAD_Symbol_14
          double_tape_pointer = double_tape_pointer+1
      RETURN
            case (3) 
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_22 = double_tape(double_tape_pointer)
      OpenAD_Symbol_29 = 1
          end select

        end subroutine top
       subroutine head(X,Y,call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
      type(active) :: OpenAD_Symbol_0
      type(active) :: OpenAD_Symbol_1
C
C     **** Parameters and Result ****
C
      type(active) :: X
      INTENT(IN)  X
      type(active) :: Y

      type(active) :: T1
      type(active) :: T2
C
C     **** statements ****
C

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
      T1%v = (X%v*Y%v)
      T2%v = (Y%v+X%v*T1%v)
      Y%v = (T1%v+T2%v)
      RETURN
            case (2) 
      OpenAD_Symbol_2%v = (X%v*Y%v)
      OpenAD_Symbol_0%v = Y%v
      OpenAD_Symbol_7%v = (Y%v+X%v*T1%v)
          double_tape(double_tape_pointer) = OpenAD_Symbol_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_16
          double_tape_pointer = double_tape_pointer+1
      RETURN
            case (3) 
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_22 = double_tape(double_tape_pointer)
          OpenAD_Symbol_17%d = OpenAD_Symbol_17%d+T1%d*OpenAD_Symbol_22
          OpenAD_Symbol_15%d = 0.0d0
      OpenAD_Symbol_29 = 1
          end select

        end subroutine head
RES
    $ff_src = <<'FFSRC';
      SUBROUTINE top(z)
      use w2f__types
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) z
      REAL(w2f__8) T2
C
C     **** statements ****
C
C     $OpenAD$ BEGIN REPLACEMENT 1
      __value__(T1) = (__value__(X) * __value__(Y))
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 2
      __value__(OpenAD_Symbol_7) = (__value__(junk) + __value__(X) *
     >  __value__(T1))
C     $OpenAD$ INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_14))
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 3
C     $OpenAD$ INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_22))
      OpenAD_Symbol_29 = 1
C     $OpenAD$ END REPLACEMENT
      END SUBROUTINE

      SUBROUTINE head(X, Y)
      use w2f__types
      IMPLICIT NONE
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
C
C     **** Parameters and Result ****
C
      REAL(w2f__8) X
      INTENT(IN)  X
      REAL(w2f__8) Y

      REAL(w2f__8) T1
      REAL(w2f__8) T2
C
C     **** statements ****
C
C     $OpenAD$ BEGIN REPLACEMENT 1
      __value__(T1) = (__value__(X) * __value__(Y))
      __value__(T2) = (__value__(Y) + __value__(X) * __value__(T1))
      __value__(Y) = (__value__(T1) + __value__(T2))
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 2
      __value__(OpenAD_Symbol_2) = (__value__(X) * __value__(Y))
      __value__(OpenAD_Symbol_0) = __value__(Y)
      __value__(OpenAD_Symbol_7) = (__value__(Y) + __value__(X) *
     >  __value__(T1))
C     $OpenAD$ INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_14))
C     $OpenAD$ INLINE push(subst)
      CALL push(__deriv__(OpenAD_Symbol_16))
      RETURN
C     $OpenAD$ END REPLACEMENT
C     $OpenAD$ BEGIN REPLACEMENT 3
C     $OpenAD$ INLINE Pop(subst)
      CALL Pop(__deriv__(OpenAD_Symbol_22))
C     $OpenAD$ INLINE Saxpy(subst,subst,subst)
      CALL Saxpy(__deriv__(OpenAD_Symbol_22), __deriv__(T1), __deriv__(
     > OpenAD_Symbol_17))
C     $OpenAD$ INLINE ZeroDeriv(subst)
      CALL ZeroDeriv(__deriv__(OpenAD_Symbol_15))
      OpenAD_Symbol_29 = 1
C     $OpenAD$ END REPLACEMENT
      END SUBROUTINE
FFSRC
    $inl_ff = <<'INL';
        subroutine push(x)
C $OpenAD$  INLINE DECLS
          use OpenAD_tape
          implicit none
          double precision :: x

C   $OpenAD$ END DECLS
          double_tape(double_tape_pointer)=x
          double_tape_pointer=double_tape_pointer+1
        end subroutine push
        subroutine pop(x)
C $OpenAD$  INLINE DECLS
          use OpenAD_tape
          implicit none
          double precision :: x

C   $OpenAD$ END DECLS
          double_tape_pointer=double_tape_pointer-1
          x=double_tape(double_tape_pointer)
        end subroutine pop
        subroutine saxpy(a,x,y)
C $OpenAD$  INLINE DECLS
          double precision, intent(in) :: a
          type(active), intent(in) :: x
          type(active), intent(inout) :: y
        
C   $OpenAD$ END DECLS
          y%d=y%d+x%d*a
        end subroutine saxpy
        subroutine zeroderiv(x)
C $OpenAD$  INLINE DECLS
          type(active), intent(out) :: x

C   $OpenAD$ END DECLS
          x%d=0.0d0
        end subroutine zeroderiv
INL
    $templ_ff = <<'TEMPLATE';
        subroutine template(call_nr,version)
          use OpenAD_scalar_adjoint
          use OpenAD_dct
          use OpenAD_tape
          use OpenAD_checkpoints
!          implicit none

          ! original arguments get inserted before call_nr
          ! and declared here together with all local variables
          ! generated by xaifBooster

!$TEMPLATE_PRAGMA_DECLARATIONS

          integer, intent(in) :: call_nr
          integer, intent(in), optional :: version

          ! local
          integer dble_tape_offset
          integer dble_argument_offset
          integer dble_result_offset

          dble_tape_offset=0 
          dble_argument_offset=0 
          dble_result_offset=0

          select case (version)
            case (1) 
!$PLACEHOLDER_PRAGMA$ id=1
            case (2) 
!$PLACEHOLDER_PRAGMA$ id=2
            case (3) 
!$PLACEHOLDER_PRAGMA$ id=3
          end select

        end subroutine template
TEMPLATE
}

sub teardown {
}
